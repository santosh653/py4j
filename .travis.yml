language: java
matrix:
  include:
    - name: "JDK 8, Python 3.7"
      jdk: "openjdk8"
      env: TEST_SUITE=java8-3.7
      dist: xenial
      sudo: true
      # Necessary because xenial is still alpha and java can stop working at
      # any time.
      group: edge
      arch: amd64
    - name: "JDK 8, Python 3.6"
      jdk: "openjdk8"
      env: TEST_SUITE=java8
      arch: amd64
    - name: "JDK 8, Python 2.7"
      jdk: "openjdk8"
      env: TEST_SUITE=java8-2.7
      arch: amd64
      
    - name: "JDK 8, Python 3.7"
      jdk: "openjdk8"
      env: TEST_SUITE=java8-3.7
      dist: xenial
      sudo: true
      # Necessary because xenial is still alpha and java can stop working at
      # any time.
      group: edge
      arch: ppc64le
    - name: "JDK 8, Python 3.6"
      jdk: "openjdk8"
      env: TEST_SUITE=java8
      arch: ppc64le
    - name: "JDK 8, Python 2.7"
      jdk: "openjdk8"
      env: TEST_SUITE=java8-2.7
      arch: ppc64le
      
    # Left in case someone wants to try to build with JDK 6, which uses an old
    # TLS version no longer supported by Maven Central. Maven Central is
    # required to build and test Py4J (junit).
    #- name: "JDK 6, Python 2.7"
      #jdk: "openjdk6"
      #env: TEST_SUITE=java6
      #before_install:
        #- wget -O ~/gradle.bin.zip 'https://services.gradle.org/distributions/gradle-2.14.1-bin.zip'
        #- unzip ~/gradle.bin.zip -d ~/gradle
        #- ls -l ~/
        #- ls -l ~/gradle/gradle-2.14.1
        #- export PATH="~/gradle/gradle-2.14.1/bin:$PATH"
before_cache:
  # Recommended by Travis CI doc
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.cache/pip
install:
  - eval "$(pyenv init -)"
  # Xenial is alpha right now so we install python 3.7 from deadsnakes ppa, create a venv and run our python commands from that venv.
  - if [ $TEST_SUITE == "java8-3.7" ] ; then sudo add-apt-repository ppa:deadsnakes/ppa -y; sudo apt-get update; sudo apt-get install python3.7 python3.7-venv -y; python3.7 -m venv virtualenv; . virtualenv/bin/activate; pip install nose; fi
  - if [ $TEST_SUITE == "java8" ] ; then pyenv global 3.6.3; pip install --user flake8==2.5.0; pip install --user nose; fi
  - if [ $TEST_SUITE == "java8-2.7" ] ; then pyenv install 2.7.12; pyenv global 2.7.12; pip install --user nose; fi
  # Left in case someone wants to try to build with JDK 6.
  #- if [ $TEST_SUITE == "java6" ] ; then pyenv install 2.7.12; pyenv global 2.7.12; pip install --user nose; fi
  - cd py4j-java
  # Useful in case the build stops working because of version issues.
  - ./gradlew --version
  - echo `java -version` && echo `javac -version` && echo `python --version`
  - echo $PATH
  - echo $JAVA_HOME
  - ./gradlew clean
before_script:
  # Enable IPv6
  - echo 0 | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6
script:
  - ./gradlew check
  - ./gradlew assemble
  - cd ../py4j-python
  # Only run flake8 once to save time.
  - if [ $TEST_SUITE == "java8" ] ; then flake8; fi
  - nosetests -v
